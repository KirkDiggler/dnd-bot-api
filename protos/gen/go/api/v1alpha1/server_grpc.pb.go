// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dndbotv1alpha1api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerAPIClient is the client API for PlayerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerAPIClient interface {
	ListRaces(ctx context.Context, in *ListRacesRequest, opts ...grpc.CallOption) (*ListRacesResponse, error)
	ListClasses(ctx context.Context, in *ListClassesRequest, opts ...grpc.CallOption) (*ListClassesResponse, error)
	GetClass(ctx context.Context, in *GetClassRequest, opts ...grpc.CallOption) (*GetClassResponse, error)
}

type playerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerAPIClient(cc grpc.ClientConnInterface) PlayerAPIClient {
	return &playerAPIClient{cc}
}

func (c *playerAPIClient) ListRaces(ctx context.Context, in *ListRacesRequest, opts ...grpc.CallOption) (*ListRacesResponse, error) {
	out := new(ListRacesResponse)
	err := c.cc.Invoke(ctx, "/dnd.bot.api.v1alpha1.PlayerAPI/ListRaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerAPIClient) ListClasses(ctx context.Context, in *ListClassesRequest, opts ...grpc.CallOption) (*ListClassesResponse, error) {
	out := new(ListClassesResponse)
	err := c.cc.Invoke(ctx, "/dnd.bot.api.v1alpha1.PlayerAPI/ListClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerAPIClient) GetClass(ctx context.Context, in *GetClassRequest, opts ...grpc.CallOption) (*GetClassResponse, error) {
	out := new(GetClassResponse)
	err := c.cc.Invoke(ctx, "/dnd.bot.api.v1alpha1.PlayerAPI/GetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerAPIServer is the server API for PlayerAPI service.
// All implementations should embed UnimplementedPlayerAPIServer
// for forward compatibility
type PlayerAPIServer interface {
	ListRaces(context.Context, *ListRacesRequest) (*ListRacesResponse, error)
	ListClasses(context.Context, *ListClassesRequest) (*ListClassesResponse, error)
	GetClass(context.Context, *GetClassRequest) (*GetClassResponse, error)
}

// UnimplementedPlayerAPIServer should be embedded to have forward compatible implementations.
type UnimplementedPlayerAPIServer struct {
}

func (UnimplementedPlayerAPIServer) ListRaces(context.Context, *ListRacesRequest) (*ListRacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRaces not implemented")
}
func (UnimplementedPlayerAPIServer) ListClasses(context.Context, *ListClassesRequest) (*ListClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClasses not implemented")
}
func (UnimplementedPlayerAPIServer) GetClass(context.Context, *GetClassRequest) (*GetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClass not implemented")
}

// UnsafePlayerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerAPIServer will
// result in compilation errors.
type UnsafePlayerAPIServer interface {
	mustEmbedUnimplementedPlayerAPIServer()
}

func RegisterPlayerAPIServer(s grpc.ServiceRegistrar, srv PlayerAPIServer) {
	s.RegisterService(&PlayerAPI_ServiceDesc, srv)
}

func _PlayerAPI_ListRaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerAPIServer).ListRaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnd.bot.api.v1alpha1.PlayerAPI/ListRaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerAPIServer).ListRaces(ctx, req.(*ListRacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerAPI_ListClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerAPIServer).ListClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnd.bot.api.v1alpha1.PlayerAPI/ListClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerAPIServer).ListClasses(ctx, req.(*ListClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerAPI_GetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerAPIServer).GetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnd.bot.api.v1alpha1.PlayerAPI/GetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerAPIServer).GetClass(ctx, req.(*GetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerAPI_ServiceDesc is the grpc.ServiceDesc for PlayerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnd.bot.api.v1alpha1.PlayerAPI",
	HandlerType: (*PlayerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRaces",
			Handler:    _PlayerAPI_ListRaces_Handler,
		},
		{
			MethodName: "ListClasses",
			Handler:    _PlayerAPI_ListClasses_Handler,
		},
		{
			MethodName: "GetClass",
			Handler:    _PlayerAPI_GetClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1alpha1/server.proto",
}
